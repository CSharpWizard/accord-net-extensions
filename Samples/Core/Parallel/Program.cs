using System;
using Accord.Extensions;
using System.Collections.Concurrent;

namespace Parallel
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.ForegroundColor = ConsoleColor.Red; Console.WriteLine("Parallel array processor example:"); Console.ResetColor();
            TestParallelProcessor.Test();

            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Red; Console.WriteLine("Parallel 'While' example:"); Console.ResetColor();
            testParallelWhile();

            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Red; Console.WriteLine("Parallel random example:"); Console.ResetColor();
            testParallelRandom();
        }

        static void testParallelWhile()
        {
            //adds support for parallel while (missing in .NET)
            //WATCH OUT: there is a chance that the number of iterations are larger than it should be
                        //that is because threads are invoked in parallel and (NUM_THREDS-1) threads are looking the old state of the provided condition

            const int MAX_ITER = 1;
            ConcurrentBag<int> bag = new ConcurrentBag<int>();
   
            ParallelExtensions.While(() => bag.Count < MAX_ITER, (loopState) => 
            //System.Threading.Tasks.Parallel.For(0, MAX_ITER, (_) => 
            {
                bag.Add(0);
                Console.WriteLine("Count: {0}", bag.Count);
            });

            Console.WriteLine("Final count: {0}", bag.Count);
        }

        static void testParallelRandom()
        {
            //System.Radnom class can not generate numbers in parallel. Solution: ParallelRandom<> and ParalellRandom 
            //parallel random creates few instances of Random class and initializes them with seed generated by RNGCryptoServiceProvieder random generator class.

            Console.WriteLine("Generating random numbers in parallel:");
            System.Threading.Tasks.Parallel.For(0, 100, (i) => 
            {
                Console.Write(ParallelRandom.Next() + " ");
            });

            //try generic class also (enables parallel rand generation for any random generator)
            //ParallelRandom<Random>.Initialize((seed) => new Random(seed));
            //ParallelRandom<Random>.Local.Next();

            Console.WriteLine();
        }
    }
}
